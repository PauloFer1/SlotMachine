package com.tarambola {	import com.greensock.TweenLite;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.system.ApplicationDomain;	import flash.utils.Timer;
	public class TScrollH extends MovieClip {        // Constant variables        private static var DECAY:Number = 0.93;        private static var MOUSE_DOWN_DECAY:Number = 0.5;        private static var SPEED_SPRINGNESS:Number = 0.2;        private static var BOUNCING_SPRINGESS:Number = 0.5;		// variables        private var _mouseDown:Boolean = false;        private var _velocity:Number = 0;        private var _mouseDownX:Number = 0;        private var _mouseDownPoint:Point = new Point();        private var _lastMouseDownPoint:Point = new Point();		private var maskC:Shape;        		        // elements        private var canvasWid:Number = 0;		private var canvas:Sprite;		private var scrollEl:DisplayObject;		private var _stage:Stage;		private var bar:MovieClip;		private var hand:MovieClip;			private var _width:Number;		private var _height:Number;				private var timer:Timer;				public function TScrollH(canvas:Sprite, scrollElem:DisplayObject, st:Stage, bar:MovieClip=null, hand:MovieClip=null, _width:uint=0, _height:uint=0) {			this._stage=st;			if(_width!=0 && _height!=0)				this.maskC = new Draw().dRect(_width, _height);			else				this.maskC = new Draw().dRect(canvas.width, canvas.height);						this.bar=bar;			this.canvas = canvas;			this.canvas.buttonMode = true;			this.canvasWid = this.canvas.width;			this._width=canvas.width;			this._height=canvas.height;			this.hand=hand;						var MyClass:DisplayObject = scrollElem;			this.scrollEl = scrollElem;//new MyClass();			this.scrollEl.x=0;			this.canvas.addChild(this.scrollEl);			this.canvas.addChild(this.maskC);			//this.maskC.x=1;			//this.maskC.y=yMask;			this.scrollEl.mask=maskC;			//addChild(this.canvas);						if(scrollElem.width>maskC.width)			{				// add handlers				this.canvas.addEventListener(MouseEvent.MOUSE_DOWN, on_mouse_down);				addEventListener(Event.ENTER_FRAME, on_enter_frame);				if(this.bar!=null)				{					this.canvas.addChild(bar);					this.bar.y=this.canvas.height				}				this.showHand();			}			else			{				this.scrollEl.x=this.canvas.width/2 - this.scrollEl.width/2;				this.showHand();				//this.noScroll=false;			}			this.addChild(this.canvas);		}		public function showHand(isTouch:Boolean=false):void		{			if(isTouch)			{				/*this.hand=new HandTouch();				this.timer = new Timer(5000, 1);				timer.start();				timer.addEventListener(TimerEvent.TIMER_COMPLETE, removeHand);				this.hand.x=this.maskC.width/2-this.hand.width/2;				this.hand.y=this._height/2 - this.hand.height/2;				this.canvas.addChild(this.hand);				this.canvas.addEventListener(MouseEvent.MOUSE_DOWN, removeHand);*/			}			else			{				if(this.hand!=null)				{					this.timer = new Timer(5000, 1);					timer.start();					timer.addEventListener(TimerEvent.TIMER_COMPLETE, removeHand);					this.hand.x=this.maskC.width/2-this.hand.width/2;					this.hand.y=this._height/2 - this.hand.height/2;					this.canvas.addChild(this.hand);					this.canvas.addEventListener(MouseEvent.MOUSE_DOWN, removeHand);				}			}		}		private function removeHand(evt:Event):void		{			this.timer.stop();			this.timer.removeEventListener(MouseEvent.MOUSE_DOWN, removeHand);			this.canvas.removeEventListener(MouseEvent.MOUSE_DOWN, removeHand);			TweenLite.to(this.hand, 0.4, {alpha:0, onComplete:removeAux});		}			private function removeAux():void		{			if(this.canvas.getChildByName(this.hand.name)!=null)				this.canvas.removeChild(this.hand);		}		public function setScrollElem(s:DisplayObject):void		{			this.scrollEl = s;			this.scrollEl.x=0;			this.canvas.addChild(this.scrollEl);			this.scrollEl.mask=maskC;		}		public function reset():void		{			_stage.removeEventListener(MouseEvent.MOUSE_UP, on_mouse_up);			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);			removeEventListener(Event.ENTER_FRAME, on_enter_frame);			this.canvas.removeEventListener(MouseEvent.MOUSE_DOWN, on_mouse_down);			DECAY= 0.93;			MOUSE_DOWN_DECAY = 0.5;			SPEED_SPRINGNESS= 0.2;			BOUNCING_SPRINGESS= 0.5;						// variables			_mouseDown= false;			_velocity= 0;			_mouseDownX= 0;			_mouseDownPoint= new Point();			_lastMouseDownPoint= new Point();						maskC=new Shape();						// elements			canvasWid = 0;			canvas=new Sprite();		}		private function on_enter_frame(e:Event):void{			if(this.bar!=null)			{				if(_velocity>0.1 || _velocity<-0.1)					TweenLite.to(this.bar, 0.2, {alpha:1});				else					TweenLite.to(this.bar, 0.6, {alpha:0});			}			if(this.bar!=null)			{				var perc:Number = (this.scrollEl.x /(this.scrollEl.width - this.maskC.width));				if(perc>0)					perc=0;				if(perc<-1)					perc=-1;				var a:Number = (-perc* (this.maskC.width+this.maskC.x-this.maskC.width-this.maskC.width+100)) ;//-this.maskC.height + this.maskC.y;				TweenLite.to(this.bar, 0.4, { x:-a+10 });			}            // decay the velocity            if(_mouseDown) _velocity *= MOUSE_DOWN_DECAY;            else _velocity *= DECAY;            // if not mouse down, then move the element with the velocity            if (!_mouseDown)            {                var textWidth:Number = this.scrollEl.width;                var x:Number = this.scrollEl.x;                var bouncing:Number = 0;                // calculate a bouncing when the text moves over the canvas size                if (x > 0)                {                    bouncing = -x * BOUNCING_SPRINGESS;                }				else if( x + textWidth < this.canvasWid)				{                    bouncing = (this.canvasWid - textWidth - x) * BOUNCING_SPRINGESS;                }                this.scrollEl.x = x + _velocity + bouncing;            }		}				// when mouse button up        private function on_mouse_down(e:MouseEvent):void        {            if (!_mouseDown)            {                // get some initial properties                _mouseDownPoint = new Point(e.stageX, e.stageY);                _lastMouseDownPoint = new Point(e.stageX, e.stageY);                _mouseDown = true;                _mouseDownX = this.scrollEl.x;								// add some more mouse handlers                _stage.addEventListener(MouseEvent.MOUSE_UP, on_mouse_up);                _stage.addEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);            }        }        // when mouse is moving        private function  on_mouse_move(e:MouseEvent):void        {            if (_mouseDown)            {                // update the element position                var point:Point = new Point(e.stageX, e.stageY);                this.scrollEl.x = _mouseDownX + (point.x - _mouseDownPoint.x);								if( this.scrollEl.x>20 || this.scrollEl.x < -(this.scrollEl.width -this.maskC.width+20))					on_mouse_up(new MouseEvent(MouseEvent.MOUSE_UP));                // update the velocity                _velocity += ((point.x - _lastMouseDownPoint.x) * SPEED_SPRINGNESS);                _lastMouseDownPoint = point;            }        }        // clear everythign when mouse up        private function  on_mouse_up(e:MouseEvent):void        {            if (_mouseDown)            {                _mouseDown = false;                _stage.removeEventListener(MouseEvent.MOUSE_UP, on_mouse_up);                _stage.removeEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);            }        }	}}