package com.tarambola {	import com.greensock.TweenLite;	import com.greensock.TweenMax;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.system.ApplicationDomain;	import flash.utils.Timer;
	public class TScroll extends MovieClip {        // Constant variables        private static var DECAY:Number =0.6; //0.3;        private static var MOUSE_DOWN_DECAY:Number = 0.5;        private static var SPEED_SPRINGNESS:Number = 4;        private static var BOUNCING_SPRINGESS:Number = 0.4;		// variables        private var _mouseDown:Boolean = false;        private var _velocity:Number = 0;        private var _mouseDownY:Number = 0;        private var _mouseDownPoint:Point = new Point();        private var _lastMouseDownPoint:Point = new Point();		private var maskC:Shape;        		        // elements        private var canvasHei:Number = 0;		private var canvas:Sprite;		private var scrollEl:DisplayObject;		private var _stage:Stage;		private var bar:MovieClip;		private var hand:MovieClip;		private var _height:Number;				public var noScroll:Boolean=true;				private var timer:Timer;				public function TScroll(canvas:Sprite, scrollElem:DisplayObject, st:Stage, bar:MovieClip=null, hand:MovieClip=null, _width:uint=0, _height:uint=0) {			this._stage=st;			if(_width!=0 && _height!=0)				this.maskC = new Draw().dRect(_width, _height);			else				this.maskC = new Draw().dRect(canvas.width, canvas.height-6);			this.maskC.y=3;			this.bar=bar;			this.canvas = canvas;			this._height = canvas.height;			this.canvas.buttonMode = true;			this.hand=hand;			this.canvasHei = this.canvas.height;									var MyClass:DisplayObject = scrollElem;			this.scrollEl = scrollElem;//new MyClass();			//this.addChild(this.canvas);			this.canvas.addChild(this.scrollEl);			this.canvas.addChild(this.maskC);			/*this.maskC.x=xMask;			this.maskC.y=yMask;*/			this.scrollEl.mask=maskC;			//addChild(this.canvas);			if(scrollElem.height>maskC.height)			{			// add handlers				this.canvas.addEventListener(MouseEvent.MOUSE_DOWN, on_mouse_down);				this._stage.addEventListener(Event.ENTER_FRAME, on_enter_frame);				if(this.bar!=null)				{					this.canvas.addChild(bar);					this.bar.x=this.canvas.width-20				}				this.showHand();			}			else			{				//this.scrollEl.x=this.canvas.width/2 - this.scrollEl.width/2;				this.noScroll=false;				this._stage.removeEventListener(Event.ENTER_FRAME, on_enter_frame);				this.canvas.removeEventListener(MouseEvent.MOUSE_DOWN, on_mouse_down);			}			this.addChild(this.canvas);		}		public function reset():void		{			this.scrollEl.y=0;			this._stage.removeEventListener(Event.ENTER_FRAME, on_enter_frame);			this.canvas.removeEventListener(MouseEvent.MOUSE_DOWN, on_mouse_down);			_stage.removeEventListener(MouseEvent.MOUSE_UP, on_mouse_up);			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);		}		public function showHand():void		{			if(this.hand!=null)			{				this.timer = new Timer(5000, 1);				timer.start();				timer.addEventListener(TimerEvent.TIMER_COMPLETE, removeHand);				this.hand.x=this.canvas.width/2-this.hand.width/2;				this.hand.y=this._height/2 - this.hand.height/2;				this.canvas.addChild(this.hand);				this.canvas.addEventListener(MouseEvent.MOUSE_DOWN, removeHand);			}		}		private function removeHand(evt:Event):void		{			this.timer.stop();			this.timer.removeEventListener(MouseEvent.MOUSE_DOWN, removeHand);			this.canvas.removeEventListener(MouseEvent.MOUSE_DOWN, removeHand);			TweenLite.to(this.hand, 0.3, {alpha:0, onComplete:removeAux});					}			private function removeAux():void		{			if(this.canvas.getChildByName(this.hand.name)!=null)				this.canvas.removeChild(this.hand);		}		private function on_enter_frame(e:Event):void{            // decay the velocity			if(this.bar!=null)			{				if(_velocity>0.1 || _velocity<-0.1)				{					TweenMax.to(this.bar, 0.2, {alpha:1});					//this.bar.alpha=1;				}				else				{					TweenMax.to(this.bar, 0.6, {alpha:0});					//this.bar.alpha=0;				}			}			if(this.bar!=null)			{			var perc:Number = (this.scrollEl.y /(this.scrollEl.height - this.maskC.height));			if(perc>0)				perc=0;			if(perc<-1)				perc=-1;			var a:Number = (-perc* (this.maskC.height+this.maskC.y-this.maskC.height-this.maskC.height+100)) ;//-this.maskC.height + this.maskC.y;			TweenLite.to(this.bar, 0.4, { y:-a });			}			            if(_mouseDown) _velocity *= MOUSE_DOWN_DECAY;            else _velocity *= DECAY;            // if not mouse down, then move the element with the velocity            if (!_mouseDown)            {                var textHeight:Number = this.scrollEl.height;                var y:Number = this.scrollEl.y;                var bouncing:Number = 0;                // calculate a bouncing when the text moves over the canvas size                if (y > 0)                {                    bouncing = -y * BOUNCING_SPRINGESS;                }				else if( y + textHeight < this.canvasHei)				{                    bouncing = (this.canvasHei - textHeight - y) * BOUNCING_SPRINGESS;                }                this.scrollEl.y = y + _velocity + bouncing;            }		}				// when mouse button up        private function on_mouse_down(e:MouseEvent):void        {            if (!_mouseDown)            {                // get some initial properties                _mouseDownPoint = new Point(e.stageX, e.stageY);                _lastMouseDownPoint = new Point(e.stageX, e.stageY);                _mouseDown = true;                _mouseDownY = this.scrollEl.y;								// add some more mouse handlers                _stage.addEventListener(MouseEvent.MOUSE_UP, on_mouse_up);                _stage.addEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);            }        }        // when mouse is moving        private function  on_mouse_move(e:MouseEvent):void        {            if (_mouseDown)            {                // update the element position                var point:Point = new Point(e.stageX, e.stageY);                this.scrollEl.y = _mouseDownY + (point.y - _mouseDownPoint.y);								if( this.scrollEl.y>0 || this.scrollEl.y < -(this.scrollEl.height -this.maskC.height))					on_mouse_up(new MouseEvent(MouseEvent.MOUSE_UP));                // update the velocity                _velocity += ((point.y - _lastMouseDownPoint.y) * SPEED_SPRINGNESS);                _lastMouseDownPoint = point;            }        }        // clear everythign when mouse up        private function  on_mouse_up(e:MouseEvent):void        {            if (_mouseDown)            {                _mouseDown = false;                _stage.removeEventListener(MouseEvent.MOUSE_UP, on_mouse_up);                _stage.removeEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);            }        }	}}